(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[467],{5458:function(e,t,n){"use strict";n.d(t,{Tl:function(){return makeSample},hu:function(){return assert}});var r=n(5893),a=n(9008),i=n.n(a),o=n(1163),s=n(7294),l=n(4131),u=n.n(l);n(6876);let SampleLayout=e=>{let t=(0,s.useRef)(null),a=(0,s.useMemo)(()=>e.sources.map(e=>{let{name:t,contents:a}=e;return{name:t,...function(e){let t;let a=null;{a=document.createElement("div");let e=n(4631);t=e(a,{lineNumbers:!0,lineWrapping:!0,theme:"monokai",readOnly:!0})}return{Container:function(n){return(0,r.jsx)("div",{...n,children:(0,r.jsx)("div",{ref:n=>{a&&n&&(n.appendChild(a),t.setOption("value",e))}})})}}}(a)}}),e.sources),l=(0,s.useRef)(null),c=(0,s.useMemo)(()=>{if(e.gui){let e=n(4376),t=new e.GUI({autoPlace:!1});return t.domElement.style.position="relative",t.domElement.style.zIndex="1000",t}},[]),p=(0,s.useRef)(null),d=(0,s.useMemo)(()=>{if(e.stats){let e=n(2792);return new e}},[]),m=(0,o.useRouter)(),f=m.asPath.match(/#([a-zA-Z0-9\.\/]+)/),[g,h]=(0,s.useState)(null),[x,b]=(0,s.useState)(null);return(0,s.useEffect)(()=>{if(f?b(f[1]):b(a[0].name),c&&l.current)for(l.current.appendChild(c.domElement);c.__controllers.length>0;)c.__controllers[0].remove();d&&p.current&&(d.dom.style.position="absolute",d.showPanel(1),p.current.appendChild(d.dom));let n={active:!0};try{let r=t.current;if(!r)throw Error("The canvas is not available");let a=e.init({canvas:r,pageState:n,gui:c,stats:d});a instanceof Promise&&a.catch(e=>{console.error(e),h(e)})}catch(e){console.error(e),h(e)}return()=>{n.active=!1}},[]),(0,r.jsxs)("main",{children:[(0,r.jsxs)(i(),{children:[(0,r.jsx)("style",{dangerouslySetInnerHTML:{__html:"\n            .CodeMirror {\n              height: auto !important;\n              margin: 1em 0;\n            }\n\n            .CodeMirror-scroll {\n              height: auto !important;\n              overflow: visible !important;\n            }\n          "}}),(0,r.jsx)("title",{children:"".concat(e.name," - WebGPU Samples")}),(0,r.jsx)("meta",{name:"description",content:e.description}),(0,r.jsx)("meta",{httpEquiv:"origin-trial",content:e.originTrial})]}),(0,r.jsxs)("div",{children:[(0,r.jsx)("h1",{children:e.name}),(0,r.jsx)("a",{target:"_blank",rel:"noreferrer",href:"https://github.com/".concat("Cryszzz/webgpu-samples","/tree/main/").concat(e.filename),children:"See it on Github!"}),(0,r.jsx)("p",{children:e.description}),g?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("p",{children:"Something went wrong. Do your browser and device support WebGPU?"}),(0,r.jsx)("p",{children:"".concat(g)})]}):null]}),(0,r.jsxs)("div",{className:u().canvasContainer,children:[(0,r.jsx)("div",{style:{position:"absolute",left:10},ref:p}),(0,r.jsx)("div",{style:{position:"absolute",right:10},ref:l}),(0,r.jsx)("canvas",{ref:t})]}),(0,r.jsxs)("div",{children:[(0,r.jsx)("nav",{className:u().sourceFileNav,children:(0,r.jsx)("ul",{children:a.map((e,t)=>(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"#".concat(e.name),"data-active":x==e.name,onClick:()=>{b(e.name)},children:e.name})},t))})}),a.map((e,t)=>(0,r.jsx)(e.Container,{className:u().sourceFileContainer,"data-active":x==e.name},t))]})]})},makeSample=e=>(0,r.jsx)(SampleLayout,{...e});function assert(e,t){if(!e)throw Error(t)}},5467:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return main}});var r,a,i=n(6416),o=n(5458),s="\nconst modeAlbedoTexture = 0;\nconst modeNormalTexture = 1;\nconst modeDepthTexture = 2;\nconst modeNormalMap = 3;\nconst modeParallaxScale = 4;\nconst modeSteepParallax = 5;\n\nstruct SpaceTransforms {\n  worldViewProjMatrix: mat4x4f,\n  worldViewMatrix: mat4x4f,\n}\n\nstruct MapInfo {\n  lightPosVS: vec3f, // Light position in view space\n  mode: u32,\n  lightIntensity: f32,\n  depthScale: f32,\n  depthLayers: f32,\n}\n\nstruct VertexInput {\n  // Shader assumes the missing 4th float is 1.0\n  @location(0) position : vec4f,\n  @location(1) normal : vec3f,\n  @location(2) uv : vec2f,\n  @location(3) vert_tan: vec3f,\n  @location(4) vert_bitan: vec3f,\n}\n\nstruct VertexOutput {\n  @builtin(position) posCS : vec4f,    // vertex position in clip space\n  @location(0) posVS : vec3f,          // vertex position in view space\n  @location(1) tangentVS: vec3f,       // vertex tangent in view space\n  @location(2) bitangentVS: vec3f,     // vertex tangent in view space\n  @location(3) normalVS: vec3f,        // vertex normal in view space\n  @location(5) uv : vec2f,             // vertex texture coordinate\n}\n\n// Uniforms\n@group(0) @binding(0) var<uniform> spaceTransform : SpaceTransforms;\n@group(0) @binding(1) var<uniform> mapInfo: MapInfo;\n\n// Texture info\n@group(1) @binding(0) var textureSampler: sampler;\n@group(1) @binding(1) var albedoTexture: texture_2d<f32>;\n@group(1) @binding(2) var normalTexture: texture_2d<f32>;\n@group(1) @binding(3) var depthTexture: texture_2d<f32>;\n\n\n@vertex\nfn vertexMain(input: VertexInput) -> VertexOutput {\n  var output : VertexOutput;\n\n  output.posCS = spaceTransform.worldViewProjMatrix * input.position;\n  output.posVS = (spaceTransform.worldViewMatrix * input.position).xyz;\n  output.tangentVS = (spaceTransform.worldViewMatrix * vec4(input.vert_tan, 0)).xyz;\n  output.bitangentVS = (spaceTransform.worldViewMatrix * vec4(input.vert_bitan, 0)).xyz;\n  output.normalVS = (spaceTransform.worldViewMatrix * vec4(input.normal, 0)).xyz;\n  output.uv = input.uv;\n\n  return output;\n}\n\n@fragment\nfn fragmentMain(input: VertexOutput) -> @location(0) vec4f {\n  // Build the matrix to convert from tangent space to view space\n  let tangentToView = mat3x3f(\n    input.tangentVS,\n    input.bitangentVS,\n    input.normalVS,\n  );\n\n  // The inverse of a non-scaling affine 3x3 matrix is it's transpose\n  let viewToTangent = transpose(tangentToView);\n\n  // Calculate the normalized vector in tangent space from the camera to the fragment\n  let viewDirTS = normalize(viewToTangent * input.posVS);\n\n  // Apply parallax to the texture coordinate, if parallax is enabled\n  var uv : vec2f;\n  switch (mapInfo.mode) {\n    case modeParallaxScale: {\n      uv = parallaxScale(input.uv, viewDirTS);\n      break;\n    }\n    case modeSteepParallax: {\n      uv = parallaxSteep(input.uv, viewDirTS);\n      break;\n    }\n    default: {\n      uv = input.uv;\n      break;\n    }\n  }\n\n  // Sample the albedo texture\n  let albedoSample = textureSample(albedoTexture, textureSampler, uv);\n\n  // Sample the normal texture\n  let normalSample = textureSample(normalTexture, textureSampler, uv);\n\n  switch (mapInfo.mode) {\n    case modeAlbedoTexture: { // Output the albedo sample\n      return albedoSample;\n    }\n    case modeNormalTexture: { // Output the normal sample\n      return normalSample;\n    }\n    case modeDepthTexture: { // Output the depth map\n      return textureSample(depthTexture, textureSampler, input.uv);\n    }\n    default: {\n      // Transform the normal sample to a tangent space normal\n      let normalTS = normalSample.xyz * 2 - 1;\n\n      // Convert normal from tangent space to view space, and normalize\n      let normalVS = normalize(tangentToView * normalTS);\n\n      // Calculate the vector in view space from the light position to the fragment\n      let fragToLightVS = mapInfo.lightPosVS - input.posVS;\n\n      // Calculate the square distance from the light to the fragment\n      let lightSqrDist = dot(fragToLightVS, fragToLightVS);\n\n      // Calculate the normalized vector in view space from the fragment to the light\n      let lightDirVS = fragToLightVS * inverseSqrt(lightSqrDist);\n\n      // Light strength is inversely proportional to square of distance from light\n      let diffuseLight = mapInfo.lightIntensity * max(dot(lightDirVS, normalVS), 0) / lightSqrDist;\n\n      // The diffuse is the albedo color multiplied by the diffuseLight\n      let diffuse = albedoSample.rgb * diffuseLight;\n\n      return vec4f(diffuse, 1.0);\n    }\n  }\n}\n\n\n// Returns the uv coordinate displaced in the view direction by a magnitude calculated by the depth\n// sampled from the depthTexture and the angle between the surface normal and view direction.\nfn parallaxScale(uv: vec2f, viewDirTS: vec3f) -> vec2f {\n  let depthSample = textureSample(depthTexture, textureSampler, uv).r;\n  return uv + viewDirTS.xy * (depthSample * mapInfo.depthScale) / -viewDirTS.z;\n}\n\n// Returns the uv coordinates displaced in the view direction by ray-tracing the depth map.\nfn parallaxSteep(startUV: vec2f, viewDirTS: vec3f) -> vec2f {\n  // Calculate derivatives of the texture coordinate, so we can sample the texture with non-uniform\n  // control flow.\n  let ddx = dpdx(startUV);\n  let ddy = dpdy(startUV);\n\n  // Calculate the delta step in UV and depth per iteration\n  let uvDelta = viewDirTS.xy * mapInfo.depthScale / (-viewDirTS.z * mapInfo.depthLayers);\n  let depthDelta = 1.0 / f32(mapInfo.depthLayers);\n  let posDelta = vec3(uvDelta, depthDelta);\n\n  // Walk the depth texture, and stop when the ray intersects the depth map\n  var pos = vec3(startUV, 0);\n  for (var i = 0; i < 32; i++) {\n    if (pos.z >= textureSampleGrad(depthTexture, textureSampler, pos.xy, ddx, ddy).r) {\n      break; // Hit the surface\n    }\n    pos += posDelta;\n  }\n\n  return pos.xy;\n}\n";let createMeshRenderable=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=n?GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE:GPUBufferUsage.VERTEX,i=r?GPUBufferUsage.INDEX|GPUBufferUsage.STORAGE:GPUBufferUsage.INDEX,o=e.createBuffer({size:t.vertices.byteLength,usage:a,mappedAtCreation:!0});new Float32Array(o.getMappedRange()).set(t.vertices),o.unmap();let s=e.createBuffer({size:t.indices.byteLength,usage:i,mappedAtCreation:!0});return t.indices.byteLength===t.indices.length*Uint16Array.BYTES_PER_ELEMENT?new Uint16Array(s.getMappedRange()).set(t.indices):new Uint32Array(s.getMappedRange()).set(t.indices),s.unmap(),{vertexBuffer:o,indexBuffer:s,indexCount:t.indices.length}},createBindGroupDescriptor=(e,t,n,r,a,i,o)=>{let s=[];for(let a=0;a<e.length;a++)s.push({binding:e[a],visibility:t[a%t.length],[n[a]]:r[a]});let l=o.createBindGroupLayout({label:"".concat(i,".bindGroupLayout"),entries:s}),u=[];for(let e=0;e<a.length;e++){let t=[];for(let n=0;n<a[0].length;n++)t.push({binding:n,resource:a[e][n]});let n=o.createBindGroup({label:"".concat(i,".bindGroup").concat(e),layout:l,entries:t});u.push(n)}return{bindGroups:u,bindGroupLayout:l}},convertVertexFormatToBytes=e=>{let t=e.split("x"),n=parseInt(t[0].replace(/[^0-9]/g,""))/8,r=n*(void 0!==t[1]?parseInt(t[1]):1);return r},createVBuffer=e=>{let t=e.reduce((e,t,n)=>{let r={shaderLocation:n,offset:e.arrayStride,format:t},a=e.arrayStride+convertVertexFormatToBytes(t),i={attributes:[...e.attributes,r],arrayStride:a};return i},{attributes:[],arrayStride:0}),n={arrayStride:t.arrayStride,attributes:t.attributes};return n},create3DRenderPipeline=function(e,t,n,r,a,i,o){let s=arguments.length>7&&void 0!==arguments[7]&&arguments[7],l=arguments.length>8&&void 0!==arguments[8]?arguments[8]:"triangle-list",u=arguments.length>9&&void 0!==arguments[9]?arguments[9]:"back",c={label:"".concat(t,".pipeline"),layout:e.createPipelineLayout({label:"".concat(t,".pipelineLayout"),bindGroupLayouts:n}),vertex:{module:e.createShaderModule({label:"".concat(t,".vertexShader"),code:r}),entryPoint:"vertexMain",buffers:0!==a.length?[createVBuffer(a)]:[]},fragment:{module:e.createShaderModule({label:"".concat(t,".fragmentShader"),code:i}),entryPoint:"fragmentMain",targets:[{format:o}]},primitive:{topology:l,cullMode:u}};return s&&(c.depthStencil={depthCompare:"less",depthWriteEnabled:!0,format:"depth24plus"}),e.createRenderPipeline(c)},createTextureFromImage=(e,t)=>{let n=e.createTexture({size:[t.width,t.height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return e.queue.copyExternalImageToTexture({source:t},{texture:n},[t.width,t.height]),n};var l="src/sample/normalMap/main.ts";(r=a||(a={}))[r.Spiral=0]="Spiral",r[r.Toybox=1]="Toybox",r[r.BrickWall=2]="BrickWall";let init=async e=>{let t,n,r,o,l,u,c,p,{canvas:d,pageState:m,gui:f}=e,g=await navigator.gpu.requestAdapter(),h=await g.requestDevice();if(!m.active)return;let x=d.getContext("webgpu"),b=window.devicePixelRatio;d.width=d.clientWidth*b,d.height=d.clientHeight*b;let v=navigator.gpu.getPreferredCanvasFormat();x.configure({device:h,format:v,alphaMode:"premultiplied"});let y={"Bump Mode":"Normal Map",cameraPosX:0,cameraPosY:.8,cameraPosZ:-1.4,lightPosX:1.7,lightPosY:.7,lightPosZ:-1.9,lightIntensity:5,depthScale:.05,depthLayers:16,Texture:"Spiral","Reset Light":()=>{}},w=h.createTexture({size:[d.width,d.height],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),T=h.createBuffer({size:256,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),S=h.createBuffer({size:8*Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),P=new ArrayBuffer(S.size),B=new DataView(P,0,P.byteLength);{let e=await fetch("../assets/img/wood_albedo.png"),n=await createImageBitmap(await e.blob());t=createTextureFromImage(h,n)}{let e=await fetch("../assets/img/spiral_normal.png"),t=await createImageBitmap(await e.blob());n=createTextureFromImage(h,t)}{let e=await fetch("../assets/img/spiral_height.png"),t=await createImageBitmap(await e.blob());r=createTextureFromImage(h,t)}{let e=await fetch("../assets/img/toybox_normal.png"),t=await createImageBitmap(await e.blob());o=createTextureFromImage(h,t)}{let e=await fetch("../assets/img/toybox_height.png"),t=await createImageBitmap(await e.blob());l=createTextureFromImage(h,t)}{let e=await fetch("../assets/img/brickwall_albedo.png"),t=await createImageBitmap(await e.blob());u=createTextureFromImage(h,t)}{let e=await fetch("../assets/img/brickwall_normal.png"),t=await createImageBitmap(await e.blob());c=createTextureFromImage(h,t)}{let e=await fetch("../assets/img/brickwall_height.png"),t=await createImageBitmap(await e.blob());p=createTextureFromImage(h,t)}let G=h.createSampler({magFilter:"linear",minFilter:"linear"}),U={colorAttachments:[{view:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:w.createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},V=createMeshRenderable(h,function(e,t,n){let r=[{tangent:5,bitangent:2,normal:0},{tangent:4,bitangent:2,normal:1},{tangent:0,bitangent:5,normal:2},{tangent:0,bitangent:4,normal:3},{tangent:0,bitangent:2,normal:4},{tangent:1,bitangent:2,normal:5}],a=new Float32Array(56*r.length),i=new Uint16Array(6*r.length),o=[[+e/2,0,0],[-e/2,0,0],[0,+t/2,0],[0,-t/2,0],[0,0,+n/2],[0,0,-n/2]],s=0,l=0;for(let e=0;e<r.length;e++){let t=r[e],n=o[t.tangent],u=o[t.bitangent],c=o[t.normal];for(let e=0;e<2;e++)for(let t=0;t<2;t++){for(let r=0;r<3;r++)a[s++]=c[r]+(0==e?-1:1)*n[r]+(0==t?-1:1)*u[r];for(let e=0;e<3;e++)a[s++]=c[e];a[s++]=e,a[s++]=t;for(let e=0;e<3;e++)a[s++]=n[e];for(let e=0;e<3;e++)a[s++]=u[e]}i[l++]=4*e+0,i[l++]=4*e+2,i[l++]=4*e+1,i[l++]=4*e+2,i[l++]=4*e+3,i[l++]=4*e+1}return{vertices:a,indices:i,vertexStride:56}}(1,1,1)),M=createBindGroupDescriptor([0,1],[GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,GPUShaderStage.FRAGMENT|GPUShaderStage.VERTEX],["buffer","buffer"],[{type:"uniform"},{type:"uniform"}],[[{buffer:T},{buffer:S}]],"Frame",h),I=createBindGroupDescriptor([0,1,2,3],[GPUShaderStage.FRAGMENT],["sampler","texture","texture","texture"],[{type:"filtering"},{sampleType:"float"},{sampleType:"float"},{sampleType:"float"}],[[G,t.createView(),n.createView(),r.createView()],[G,t.createView(),o.createView(),l.createView()],[G,u.createView(),c.createView(),p.createView()]],"Surface",h),E=d.width/d.height,F=i._E.perspective(2*Math.PI/5,E,.1,10),getMode=()=>{switch(y["Bump Mode"]){case"Albedo Texture":return 0;case"Normal Texture":return 1;case"Depth Texture":return 2;case"Normal Map":return 3;case"Parallax Scale":return 4;case"Steep Parallax":return 5}},A=create3DRenderPipeline(h,"NormalMappingRender",[M.bindGroupLayout,I.bindGroupLayout],s,["float32x3","float32x3","float32x2","float32x3","float32x3"],s,v,!0),_=0;f.add(y,"Bump Mode",["Albedo Texture","Normal Texture","Depth Texture","Normal Map","Parallax Scale","Steep Parallax"]),f.add(y,"Texture",["Spiral","Toybox","BrickWall"]).onChange(()=>{_=a[y.Texture]});let L=f.addFolder("Light"),D=f.addFolder("Depth");L.add(y,"Reset Light").onChange(()=>{R.setValue(1.7),C.setValue(.7),N.setValue(-1.9),O.setValue(5)});let R=L.add(y,"lightPosX",-5,5).step(.1),C=L.add(y,"lightPosY",-5,5).step(.1),N=L.add(y,"lightPosZ",-5,5).step(.1),O=L.add(y,"lightIntensity",0,10).step(.1);D.add(y,"depthScale",0,.1).step(.01),D.add(y,"depthLayers",1,32).step(1),requestAnimationFrame(function frame(){if(!m.active)return;let e=i._E.lookAt([y.cameraPosX,y.cameraPosY,y.cameraPosZ],[0,0,0],[0,1,0]),t=i._E.mul(e,function(){let e=i._E.create();i._E.identity(e);let t=Date.now()/1e3;return i._E.rotateY(e,-.5*t,e),e}()),n=i._E.mul(F,t),r=new Float32Array([...n,...t]),a=i.R3.create(y.lightPosX,y.lightPosY,y.lightPosZ),o=i.R3.transformMat4(a,e),s=getMode();h.queue.writeBuffer(T,0,r.buffer,r.byteOffset,r.byteLength),B.setFloat32(0,o[0],!0),B.setFloat32(4,o[1],!0),B.setFloat32(8,o[2],!0),B.setUint32(12,s,!0),B.setFloat32(16,y.lightIntensity,!0),B.setFloat32(20,y.depthScale,!0),B.setFloat32(24,y.depthLayers,!0),h.queue.writeBuffer(S,0,P),U.colorAttachments[0].view=x.getCurrentTexture().createView();let l=h.createCommandEncoder(),u=l.beginRenderPass(U);u.setPipeline(A),u.setBindGroup(0,M.bindGroups[0]),u.setBindGroup(1,I.bindGroups[_]),u.setVertexBuffer(0,V.vertexBuffer),u.setIndexBuffer(V.indexBuffer,"uint16"),u.drawIndexed(V.indexCount),u.end(),h.queue.submit([l.finish()]),requestAnimationFrame(frame)})};var main=()=>(0,o.Tl)({name:"Normal Mapping",description:"This example demonstrates multiple different methods that employ fragment shaders to achieve additional perceptual depth on the surface of a cube mesh. Demonstrated methods include normal mapping, parallax mapping, and steep parallax mapping.",gui:!0,init,sources:[{name:l.substring(21),contents:"import { mat4, vec3 } from 'wgpu-matrix';\nimport { makeSample, SampleInit } from '../../components/SampleLayout';\nimport normalMapWGSL from './normalMap.wgsl';\nimport { createMeshRenderable } from '../../meshes/mesh';\nimport { createBoxMeshWithTangents } from '../../meshes/box';\nimport {\n  createBindGroupDescriptor,\n  create3DRenderPipeline,\n  createTextureFromImage,\n} from './utils';\n\nconst MAT4X4_BYTES = 64;\nenum TextureAtlas {\n  Spiral,\n  Toybox,\n  BrickWall,\n}\n\nconst init: SampleInit = async ({ canvas, pageState, gui }) => {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n  if (!pageState.active) return;\n  const context = canvas.getContext('webgpu') as GPUCanvasContext;\n  const devicePixelRatio = window.devicePixelRatio;\n  canvas.width = canvas.clientWidth * devicePixelRatio;\n  canvas.height = canvas.clientHeight * devicePixelRatio;\n  const presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n  context.configure({\n    device,\n    format: presentationFormat,\n    alphaMode: 'premultiplied',\n  });\n\n  interface GUISettings {\n    'Bump Mode':\n      | 'Albedo Texture'\n      | 'Normal Texture'\n      | 'Depth Texture'\n      | 'Normal Map'\n      | 'Parallax Scale'\n      | 'Steep Parallax';\n    cameraPosX: number;\n    cameraPosY: number;\n    cameraPosZ: number;\n    lightPosX: number;\n    lightPosY: number;\n    lightPosZ: number;\n    lightIntensity: number;\n    depthScale: number;\n    depthLayers: number;\n    Texture: string;\n    'Reset Light': () => void;\n  }\n\n  const settings: GUISettings = {\n    'Bump Mode': 'Normal Map',\n    cameraPosX: 0.0,\n    cameraPosY: 0.8,\n    cameraPosZ: -1.4,\n    lightPosX: 1.7,\n    lightPosY: 0.7,\n    lightPosZ: -1.9,\n    lightIntensity: 5.0,\n    depthScale: 0.05,\n    depthLayers: 16,\n    Texture: 'Spiral',\n    'Reset Light': () => {\n      return;\n    },\n  };\n\n  // Create normal mapping resources and pipeline\n  const depthTexture = device.createTexture({\n    size: [canvas.width, canvas.height],\n    format: 'depth24plus',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const spaceTransformsBuffer = device.createBuffer({\n    // Buffer holding projection, view, and model matrices plus padding bytes\n    size: MAT4X4_BYTES * 4,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n  });\n\n  const mapInfoBuffer = device.createBuffer({\n    // Buffer holding mapping type, light uniforms, and depth uniforms\n    size: Float32Array.BYTES_PER_ELEMENT * 8,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n  });\n  const mapInfoArray = new ArrayBuffer(mapInfoBuffer.size);\n  const mapInfoView = new DataView(mapInfoArray, 0, mapInfoArray.byteLength);\n\n  // Fetch the image and upload it into a GPUTexture.\n  let woodAlbedoTexture: GPUTexture;\n  {\n    const response = await fetch('../assets/img/wood_albedo.png');\n    const imageBitmap = await createImageBitmap(await response.blob());\n    woodAlbedoTexture = createTextureFromImage(device, imageBitmap);\n  }\n\n  let spiralNormalTexture: GPUTexture;\n  {\n    const response = await fetch('../assets/img/spiral_normal.png');\n    const imageBitmap = await createImageBitmap(await response.blob());\n    spiralNormalTexture = createTextureFromImage(device, imageBitmap);\n  }\n\n  let spiralHeightTexture: GPUTexture;\n  {\n    const response = await fetch('../assets/img/spiral_height.png');\n    const imageBitmap = await createImageBitmap(await response.blob());\n    spiralHeightTexture = createTextureFromImage(device, imageBitmap);\n  }\n\n  let toyboxNormalTexture: GPUTexture;\n  {\n    const response = await fetch('../assets/img/toybox_normal.png');\n    const imageBitmap = await createImageBitmap(await response.blob());\n    toyboxNormalTexture = createTextureFromImage(device, imageBitmap);\n  }\n\n  let toyboxHeightTexture: GPUTexture;\n  {\n    const response = await fetch('../assets/img/toybox_height.png');\n    const imageBitmap = await createImageBitmap(await response.blob());\n    toyboxHeightTexture = createTextureFromImage(device, imageBitmap);\n  }\n\n  let brickwallAlbedoTexture: GPUTexture;\n  {\n    const response = await fetch('../assets/img/brickwall_albedo.png');\n    const imageBitmap = await createImageBitmap(await response.blob());\n    brickwallAlbedoTexture = createTextureFromImage(device, imageBitmap);\n  }\n\n  let brickwallNormalTexture: GPUTexture;\n  {\n    const response = await fetch('../assets/img/brickwall_normal.png');\n    const imageBitmap = await createImageBitmap(await response.blob());\n    brickwallNormalTexture = createTextureFromImage(device, imageBitmap);\n  }\n\n  let brickwallHeightTexture: GPUTexture;\n  {\n    const response = await fetch('../assets/img/brickwall_height.png');\n    const imageBitmap = await createImageBitmap(await response.blob());\n    brickwallHeightTexture = createTextureFromImage(device, imageBitmap);\n  }\n\n  // Create a sampler with linear filtering for smooth interpolation.\n  const sampler = device.createSampler({\n    magFilter: 'linear',\n    minFilter: 'linear',\n  });\n\n  const renderPassDescriptor: GPURenderPassDescriptor = {\n    colorAttachments: [\n      {\n        view: undefined, // Assigned later\n\n        clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n        loadOp: 'clear',\n        storeOp: 'store',\n      },\n    ],\n    depthStencilAttachment: {\n      view: depthTexture.createView(),\n\n      depthClearValue: 1.0,\n      depthLoadOp: 'clear',\n      depthStoreOp: 'store',\n    },\n  };\n\n  const box = createMeshRenderable(\n    device,\n    createBoxMeshWithTangents(1.0, 1.0, 1.0)\n  );\n\n  // Uniform bindGroups and bindGroupLayout\n  const frameBGDescriptor = createBindGroupDescriptor(\n    [0, 1],\n    [\n      GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n      GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX,\n    ],\n    ['buffer', 'buffer'],\n    [{ type: 'uniform' }, { type: 'uniform' }],\n    [[{ buffer: spaceTransformsBuffer }, { buffer: mapInfoBuffer }]],\n    'Frame',\n    device\n  );\n\n  // Texture bindGroups and bindGroupLayout\n  const surfaceBGDescriptor = createBindGroupDescriptor(\n    [0, 1, 2, 3],\n    [GPUShaderStage.FRAGMENT],\n    ['sampler', 'texture', 'texture', 'texture'],\n    [\n      { type: 'filtering' },\n      { sampleType: 'float' },\n      { sampleType: 'float' },\n      { sampleType: 'float' },\n    ],\n    // Multiple bindgroups that accord to the layout defined above\n    [\n      [\n        sampler,\n        woodAlbedoTexture.createView(),\n        spiralNormalTexture.createView(),\n        spiralHeightTexture.createView(),\n      ],\n      [\n        sampler,\n        woodAlbedoTexture.createView(),\n        toyboxNormalTexture.createView(),\n        toyboxHeightTexture.createView(),\n      ],\n      [\n        sampler,\n        brickwallAlbedoTexture.createView(),\n        brickwallNormalTexture.createView(),\n        brickwallHeightTexture.createView(),\n      ],\n    ],\n    'Surface',\n    device\n  );\n\n  const aspect = canvas.width / canvas.height;\n  const projectionMatrix = mat4.perspective(\n    (2 * Math.PI) / 5,\n    aspect,\n    0.1,\n    10.0\n  ) as Float32Array;\n\n  function getViewMatrix() {\n    return mat4.lookAt(\n      [settings.cameraPosX, settings.cameraPosY, settings.cameraPosZ],\n      [0, 0, 0],\n      [0, 1, 0]\n    );\n  }\n\n  function getModelMatrix() {\n    const modelMatrix = mat4.create();\n    mat4.identity(modelMatrix);\n    const now = Date.now() / 1000;\n    mat4.rotateY(modelMatrix, now * -0.5, modelMatrix);\n    return modelMatrix;\n  }\n\n  // Change the model mapping type\n  const getMode = (): number => {\n    switch (settings['Bump Mode']) {\n      case 'Albedo Texture':\n        return 0;\n      case 'Normal Texture':\n        return 1;\n      case 'Depth Texture':\n        return 2;\n      case 'Normal Map':\n        return 3;\n      case 'Parallax Scale':\n        return 4;\n      case 'Steep Parallax':\n        return 5;\n    }\n  };\n\n  const texturedCubePipeline = create3DRenderPipeline(\n    device,\n    'NormalMappingRender',\n    [frameBGDescriptor.bindGroupLayout, surfaceBGDescriptor.bindGroupLayout],\n    normalMapWGSL,\n    // Position,   normal       uv           tangent      bitangent\n    ['float32x3', 'float32x3', 'float32x2', 'float32x3', 'float32x3'],\n    normalMapWGSL,\n    presentationFormat,\n    true\n  );\n\n  let currentSurfaceBindGroup = 0;\n  const onChangeTexture = () => {\n    currentSurfaceBindGroup = TextureAtlas[settings.Texture];\n  };\n\n  gui.add(settings, 'Bump Mode', [\n    'Albedo Texture',\n    'Normal Texture',\n    'Depth Texture',\n    'Normal Map',\n    'Parallax Scale',\n    'Steep Parallax',\n  ]);\n  gui\n    .add(settings, 'Texture', ['Spiral', 'Toybox', 'BrickWall'])\n    .onChange(onChangeTexture);\n  const lightFolder = gui.addFolder('Light');\n  const depthFolder = gui.addFolder('Depth');\n  lightFolder.add(settings, 'Reset Light').onChange(() => {\n    lightPosXController.setValue(1.7);\n    lightPosYController.setValue(0.7);\n    lightPosZController.setValue(-1.9);\n    lightIntensityController.setValue(5.0);\n  });\n  const lightPosXController = lightFolder\n    .add(settings, 'lightPosX', -5, 5)\n    .step(0.1);\n  const lightPosYController = lightFolder\n    .add(settings, 'lightPosY', -5, 5)\n    .step(0.1);\n  const lightPosZController = lightFolder\n    .add(settings, 'lightPosZ', -5, 5)\n    .step(0.1);\n  const lightIntensityController = lightFolder\n    .add(settings, 'lightIntensity', 0.0, 10)\n    .step(0.1);\n  depthFolder.add(settings, 'depthScale', 0.0, 0.1).step(0.01);\n  depthFolder.add(settings, 'depthLayers', 1, 32).step(1);\n\n  function frame() {\n    if (!pageState.active) return;\n\n    // Update spaceTransformsBuffer\n    const viewMatrix = getViewMatrix();\n    const worldViewMatrix = mat4.mul(viewMatrix, getModelMatrix());\n    const worldViewProjMatrix = mat4.mul(projectionMatrix, worldViewMatrix);\n    const matrices = new Float32Array([\n      ...worldViewProjMatrix,\n      ...worldViewMatrix,\n    ]);\n\n    // Update mapInfoBuffer\n    const lightPosWS = vec3.create(\n      settings.lightPosX,\n      settings.lightPosY,\n      settings.lightPosZ\n    );\n    const lightPosVS = vec3.transformMat4(lightPosWS, viewMatrix);\n    const mode = getMode();\n    device.queue.writeBuffer(\n      spaceTransformsBuffer,\n      0,\n      matrices.buffer,\n      matrices.byteOffset,\n      matrices.byteLength\n    );\n\n    // struct MapInfo {\n    //   lightPosVS: vec3f,\n    //   mode: u32,\n    //   lightIntensity: f32,\n    //   depthScale: f32,\n    //   depthLayers: f32,\n    // }\n    mapInfoView.setFloat32(0, lightPosVS[0], true);\n    mapInfoView.setFloat32(4, lightPosVS[1], true);\n    mapInfoView.setFloat32(8, lightPosVS[2], true);\n    mapInfoView.setUint32(12, mode, true);\n    mapInfoView.setFloat32(16, settings.lightIntensity, true);\n    mapInfoView.setFloat32(20, settings.depthScale, true);\n    mapInfoView.setFloat32(24, settings.depthLayers, true);\n    device.queue.writeBuffer(mapInfoBuffer, 0, mapInfoArray);\n\n    renderPassDescriptor.colorAttachments[0].view = context\n      .getCurrentTexture()\n      .createView();\n\n    const commandEncoder = device.createCommandEncoder();\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    // Draw textured Cube\n    passEncoder.setPipeline(texturedCubePipeline);\n    passEncoder.setBindGroup(0, frameBGDescriptor.bindGroups[0]);\n    passEncoder.setBindGroup(\n      1,\n      surfaceBGDescriptor.bindGroups[currentSurfaceBindGroup]\n    );\n    passEncoder.setVertexBuffer(0, box.vertexBuffer);\n    passEncoder.setIndexBuffer(box.indexBuffer, 'uint16');\n    passEncoder.drawIndexed(box.indexCount);\n    passEncoder.end();\n    device.queue.submit([commandEncoder.finish()]);\n\n    requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n};\n\nconst NormalMapping: () => JSX.Element = () =>\n  makeSample({\n    name: 'Normal Mapping',\n    description:\n      'This example demonstrates multiple different methods that employ fragment shaders to achieve additional perceptual depth on the surface of a cube mesh. Demonstrated methods include normal mapping, parallax mapping, and steep parallax mapping.',\n    gui: true,\n    init,\n    sources: [\n      {\n        name: __filename.substring(__dirname.length + 1),\n        contents: __SOURCE__,\n      },\n      {\n        name: './normalMap.wgsl',\n        contents: normalMapWGSL,\n        editable: true,\n      },\n      {\n        name: '../../meshes/box.ts',\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        contents: require('!!raw-loader!../../meshes/box.ts').default,\n      },\n      {\n        name: '../../meshes/mesh.ts',\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        contents: require('!!raw-loader!../../meshes/mesh.ts').default,\n      },\n      {\n        name: './utils.ts',\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        contents: require('!!raw-loader!./utils.ts').default,\n      },\n    ],\n    filename: __filename,\n  });\n\nexport default NormalMapping;\n"},{name:"./normalMap.wgsl",contents:s,editable:!0},{name:"../../meshes/box.ts",contents:n(3583).Z},{name:"../../meshes/mesh.ts",contents:n(3150).Z},{name:"./utils.ts",contents:n(1146).Z}],filename:l})},4131:function(e){e.exports={canvasContainer:"SampleLayout_canvasContainer__ZTWP5",sourceFileNav:"SampleLayout_sourceFileNav__9Hf73",sourceFileContainer:"SampleLayout_sourceFileContainer__9iti6"}},3583:function(e,t){"use strict";t.Z="import { Mesh } from './mesh';\n\n/**\n * Constructs a box mesh with the given dimensions.\n * The vertex buffer will have the following vertex fields (in the given order):\n *   position  : float32x3\n *   normal    : float32x3\n *   uv        : float32x2\n *   tangent   : float32x3\n *   bitangent : float32x3\n * @param width the width of the box\n * @param height the height of the box\n * @param depth the depth of the box\n * @returns the box mesh with tangent and bitangents.\n */\nexport function createBoxMeshWithTangents(\n  width: number,\n  height: number,\n  depth: number\n): Mesh {\n  //    __________\n  //   /         /|      y\n  //  /   +y    / |      ^\n  // /_________/  |      |\n  // |         |+x|      +---> x\n  // |   +z    |  |     /\n  // |         | /     z\n  // |_________|/\n  //\n  const pX = 0; // +x\n  const nX = 1; // -x\n  const pY = 2; // +y\n  const nY = 3; // -y\n  const pZ = 4; // +z\n  const nZ = 5; // -z\n  const faces = [\n    { tangent: nZ, bitangent: pY, normal: pX },\n    { tangent: pZ, bitangent: pY, normal: nX },\n    { tangent: pX, bitangent: nZ, normal: pY },\n    { tangent: pX, bitangent: pZ, normal: nY },\n    { tangent: pX, bitangent: pY, normal: pZ },\n    { tangent: nX, bitangent: pY, normal: nZ },\n  ];\n  const verticesPerSide = 4;\n  const indicesPerSize = 6;\n  const f32sPerVertex = 14; // position : vec3f, tangent : vec3f, bitangent : vec3f, normal : vec3f, uv :vec2f\n  const vertexStride = f32sPerVertex * 4;\n  const vertices = new Float32Array(\n    faces.length * verticesPerSide * f32sPerVertex\n  );\n  const indices = new Uint16Array(faces.length * indicesPerSize);\n  const halfVecs = [\n    [+width / 2, 0, 0], // +x\n    [-width / 2, 0, 0], // -x\n    [0, +height / 2, 0], // +y\n    [0, -height / 2, 0], // -y\n    [0, 0, +depth / 2], // +z\n    [0, 0, -depth / 2], // -z\n  ];\n\n  let vertexOffset = 0;\n  let indexOffset = 0;\n  for (let faceIndex = 0; faceIndex < faces.length; faceIndex++) {\n    const face = faces[faceIndex];\n    const tangent = halfVecs[face.tangent];\n    const bitangent = halfVecs[face.bitangent];\n    const normal = halfVecs[face.normal];\n\n    for (let u = 0; u < 2; u++) {\n      for (let v = 0; v < 2; v++) {\n        for (let i = 0; i < 3; i++) {\n          vertices[vertexOffset++] =\n            normal[i] +\n            (u == 0 ? -1 : 1) * tangent[i] +\n            (v == 0 ? -1 : 1) * bitangent[i];\n        }\n        for (let i = 0; i < 3; i++) {\n          vertices[vertexOffset++] = normal[i];\n        }\n        vertices[vertexOffset++] = u;\n        vertices[vertexOffset++] = v;\n        for (let i = 0; i < 3; i++) {\n          vertices[vertexOffset++] = tangent[i];\n        }\n        for (let i = 0; i < 3; i++) {\n          vertices[vertexOffset++] = bitangent[i];\n        }\n      }\n    }\n\n    indices[indexOffset++] = faceIndex * verticesPerSide + 0;\n    indices[indexOffset++] = faceIndex * verticesPerSide + 2;\n    indices[indexOffset++] = faceIndex * verticesPerSide + 1;\n\n    indices[indexOffset++] = faceIndex * verticesPerSide + 2;\n    indices[indexOffset++] = faceIndex * verticesPerSide + 3;\n    indices[indexOffset++] = faceIndex * verticesPerSide + 1;\n  }\n\n  return {\n    vertices,\n    indices,\n    vertexStride,\n  };\n}\n"},3150:function(e,t){"use strict";t.Z="import { vec3, vec2 } from 'wgpu-matrix';\n\n// Defines what to pass to pipeline to render mesh\nexport interface Renderable {\n  vertexBuffer: GPUBuffer;\n  indexBuffer: GPUBuffer;\n  indexCount: number;\n  bindGroup?: GPUBindGroup;\n}\n\nexport interface Mesh {\n  vertices: Float32Array;\n  indices: Uint16Array | Uint32Array;\n  vertexStride: number;\n}\n\n/**\n * @param {GPUDevice} device - A valid GPUDevice.\n * @param {Mesh} mesh - An indexed triangle-list mesh, containing its vertices, indices, and vertexStride (number of elements per vertex).\n * @param {boolean} storeVertices - A boolean flag indicating whether the vertexBuffer should be available to use as a storage buffer.\n * @returns {boolean} An object containing an array of bindGroups and the bindGroupLayout they implement.\n */\nexport const createMeshRenderable = (\n  device: GPUDevice,\n  mesh: Mesh,\n  storeVertices = false,\n  storeIndices = false\n): Renderable => {\n  // Define buffer usage\n  const vertexBufferUsage = storeVertices\n    ? GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE\n    : GPUBufferUsage.VERTEX;\n  const indexBufferUsage = storeIndices\n    ? GPUBufferUsage.INDEX | GPUBufferUsage.STORAGE\n    : GPUBufferUsage.INDEX;\n\n  // Create vertex and index buffers\n  const vertexBuffer = device.createBuffer({\n    size: mesh.vertices.byteLength,\n    usage: vertexBufferUsage,\n    mappedAtCreation: true,\n  });\n  new Float32Array(vertexBuffer.getMappedRange()).set(mesh.vertices);\n  vertexBuffer.unmap();\n\n  const indexBuffer = device.createBuffer({\n    size: mesh.indices.byteLength,\n    usage: indexBufferUsage,\n    mappedAtCreation: true,\n  });\n\n  // Determine whether index buffer is indices are in uint16 or uint32 format\n  if (\n    mesh.indices.byteLength ===\n    mesh.indices.length * Uint16Array.BYTES_PER_ELEMENT\n  ) {\n    new Uint16Array(indexBuffer.getMappedRange()).set(mesh.indices);\n  } else {\n    new Uint32Array(indexBuffer.getMappedRange()).set(mesh.indices);\n  }\n\n  indexBuffer.unmap();\n\n  return {\n    vertexBuffer,\n    indexBuffer,\n    indexCount: mesh.indices.length,\n  };\n};\n\nexport const getMeshPosAtIndex = (mesh: Mesh, index: number) => {\n  const arr = new Float32Array(\n    mesh.vertices.buffer,\n    index * mesh.vertexStride + 0,\n    3\n  );\n  return vec3.fromValues(arr[0], arr[1], arr[2]);\n};\n\nexport const getMeshNormalAtIndex = (mesh: Mesh, index: number) => {\n  const arr = new Float32Array(\n    mesh.vertices.buffer,\n    index * mesh.vertexStride + 3 * Float32Array.BYTES_PER_ELEMENT,\n    3\n  );\n  return vec3.fromValues(arr[0], arr[1], arr[2]);\n};\n\nexport const getMeshUVAtIndex = (mesh: Mesh, index: number) => {\n  const arr = new Float32Array(\n    mesh.vertices.buffer,\n    index * mesh.vertexStride + 6 * Float32Array.BYTES_PER_ELEMENT,\n    2\n  );\n  return vec2.fromValues(arr[0], arr[1]);\n};\n"},1146:function(e,t){"use strict";t.Z="type BindGroupBindingLayout =\n  | GPUBufferBindingLayout\n  | GPUTextureBindingLayout\n  | GPUSamplerBindingLayout\n  | GPUStorageTextureBindingLayout\n  | GPUExternalTextureBindingLayout;\n\nexport type BindGroupsObjectsAndLayout = {\n  bindGroups: GPUBindGroup[];\n  bindGroupLayout: GPUBindGroupLayout;\n};\n\ntype ResourceTypeName =\n  | 'buffer'\n  | 'texture'\n  | 'sampler'\n  | 'externalTexture'\n  | 'storageTexture';\n\n/**\n * @param {number[]} bindings - The binding value of each resource in the bind group.\n * @param {number[]} visibilities - The GPUShaderStage visibility of the resource at the corresponding index.\n * @param {ResourceTypeName[]} resourceTypes - The resourceType at the corresponding index.\n * @returns {BindGroupsObjectsAndLayout} An object containing an array of bindGroups and the bindGroupLayout they implement.\n */\nexport const createBindGroupDescriptor = (\n  bindings: number[],\n  visibilities: number[],\n  resourceTypes: ResourceTypeName[],\n  resourceLayouts: BindGroupBindingLayout[],\n  resources: GPUBindingResource[][],\n  label: string,\n  device: GPUDevice\n): BindGroupsObjectsAndLayout => {\n  // Create layout of each entry within a bindGroup\n  const layoutEntries: GPUBindGroupLayoutEntry[] = [];\n  for (let i = 0; i < bindings.length; i++) {\n    layoutEntries.push({\n      binding: bindings[i],\n      visibility: visibilities[i % visibilities.length],\n      [resourceTypes[i]]: resourceLayouts[i],\n    });\n  }\n\n  // Apply entry layouts to bindGroupLayout\n  const bindGroupLayout = device.createBindGroupLayout({\n    label: `${label}.bindGroupLayout`,\n    entries: layoutEntries,\n  });\n\n  // Create bindGroups that conform to the layout\n  const bindGroups: GPUBindGroup[] = [];\n  for (let i = 0; i < resources.length; i++) {\n    const groupEntries: GPUBindGroupEntry[] = [];\n    for (let j = 0; j < resources[0].length; j++) {\n      groupEntries.push({\n        binding: j,\n        resource: resources[i][j],\n      });\n    }\n    const newBindGroup = device.createBindGroup({\n      label: `${label}.bindGroup${i}`,\n      layout: bindGroupLayout,\n      entries: groupEntries,\n    });\n    bindGroups.push(newBindGroup);\n  }\n\n  return {\n    bindGroups,\n    bindGroupLayout,\n  };\n};\n\nexport type ShaderKeyInterface<T extends string[]> = {\n  [K in T[number]]: number;\n};\n\ninterface AttribAcc {\n  attributes: GPUVertexAttribute[];\n  arrayStride: number;\n}\n\n/**\n * @param {GPUVertexFormat} vf - A valid GPUVertexFormat, representing a per-vertex value that can be passed to the vertex shader.\n * @returns {number} The number of bytes present in the value to be passed.\n */\nexport const convertVertexFormatToBytes = (vf: GPUVertexFormat): number => {\n  const splitFormat = vf.split('x');\n  const bytesPerElement = parseInt(splitFormat[0].replace(/[^0-9]/g, '')) / 8;\n\n  const bytesPerVec =\n    bytesPerElement *\n    (splitFormat[1] !== undefined ? parseInt(splitFormat[1]) : 1);\n\n  return bytesPerVec;\n};\n\n/** Creates a GPUVertexBuffer Layout that maps to an interleaved vertex buffer.\n * @param {GPUVertexFormat[]} vertexFormats - An array of valid GPUVertexFormats.\n * @returns {GPUVertexBufferLayout} A GPUVertexBufferLayout representing an interleaved vertex buffer.\n */\nexport const createVBuffer = (\n  vertexFormats: GPUVertexFormat[]\n): GPUVertexBufferLayout => {\n  const initialValue: AttribAcc = { attributes: [], arrayStride: 0 };\n\n  const vertexBuffer = vertexFormats.reduce(\n    (acc: AttribAcc, curr: GPUVertexFormat, idx: number) => {\n      const newAttribute: GPUVertexAttribute = {\n        shaderLocation: idx,\n        offset: acc.arrayStride,\n        format: curr,\n      };\n      const nextOffset: number =\n        acc.arrayStride + convertVertexFormatToBytes(curr);\n\n      const retVal: AttribAcc = {\n        attributes: [...acc.attributes, newAttribute],\n        arrayStride: nextOffset,\n      };\n      return retVal;\n    },\n    initialValue\n  );\n\n  const layout: GPUVertexBufferLayout = {\n    arrayStride: vertexBuffer.arrayStride,\n    attributes: vertexBuffer.attributes,\n  };\n\n  return layout;\n};\n\nexport const create3DRenderPipeline = (\n  device: GPUDevice,\n  label: string,\n  bgLayouts: GPUBindGroupLayout[],\n  vertexShader: string,\n  vBufferFormats: GPUVertexFormat[],\n  fragmentShader: string,\n  presentationFormat: GPUTextureFormat,\n  depthTest = false,\n  topology: GPUPrimitiveTopology = 'triangle-list',\n  cullMode: GPUCullMode = 'back'\n) => {\n  const pipelineDescriptor: GPURenderPipelineDescriptor = {\n    label: `${label}.pipeline`,\n    layout: device.createPipelineLayout({\n      label: `${label}.pipelineLayout`,\n      bindGroupLayouts: bgLayouts,\n    }),\n    vertex: {\n      module: device.createShaderModule({\n        label: `${label}.vertexShader`,\n        code: vertexShader,\n      }),\n      entryPoint: 'vertexMain',\n      buffers:\n        vBufferFormats.length !== 0 ? [createVBuffer(vBufferFormats)] : [],\n    },\n    fragment: {\n      module: device.createShaderModule({\n        label: `${label}.fragmentShader`,\n        code: fragmentShader,\n      }),\n      entryPoint: 'fragmentMain',\n      targets: [\n        {\n          format: presentationFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: topology,\n      cullMode: cullMode,\n    },\n  };\n  if (depthTest) {\n    pipelineDescriptor.depthStencil = {\n      depthCompare: 'less',\n      depthWriteEnabled: true,\n      format: 'depth24plus',\n    };\n  }\n  return device.createRenderPipeline(pipelineDescriptor);\n};\n\nexport const createTextureFromImage = (\n  device: GPUDevice,\n  bitmap: ImageBitmap\n) => {\n  const texture: GPUTexture = device.createTexture({\n    size: [bitmap.width, bitmap.height, 1],\n    format: 'rgba8unorm',\n    usage:\n      GPUTextureUsage.TEXTURE_BINDING |\n      GPUTextureUsage.COPY_DST |\n      GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  device.queue.copyExternalImageToTexture(\n    { source: bitmap },\n    { texture: texture },\n    [bitmap.width, bitmap.height]\n  );\n  return texture;\n};\n"}}]);