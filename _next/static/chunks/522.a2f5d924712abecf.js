"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[522],{3704:function(e,r,t){t.d(r,{Z:function(){return BaseDecoder}});let BaseDecoder=class BaseDecoder{async decode(e,r){let t=await this.decodeBlock(r),n=e.Predictor||1;if(1!==n){let r=!e.StripOffsets,i=r?e.TileWidth:e.ImageWidth,o=r?e.TileLength:e.RowsPerStrip||e.ImageLength;return function(e,r,t,n,i,o){if(!r||1===r)return e;for(let e=0;e<i.length;++e){if(i[e]%8!=0)throw Error("When decoding with predictor, only multiple of 8 bits are supported.");if(i[e]!==i[0])throw Error("When decoding with predictor, all samples must have the same size.")}let l=i[0]/8,a=2===o?1:i.length;for(let o=0;o<n;++o){let n;if(o*a*t*l>=e.byteLength)break;if(2===r){switch(i[0]){case 8:n=new Uint8Array(e,o*a*t*l,a*t*l);break;case 16:n=new Uint16Array(e,o*a*t*l,a*t*l/2);break;case 32:n=new Uint32Array(e,o*a*t*l,a*t*l/4);break;default:throw Error(`Predictor 2 not allowed with ${i[0]} bits per sample.`)}!function(e,r){let t=e.length-r,n=0;do{for(let t=r;t>0;t--)e[n+r]+=e[n],n++;t-=r}while(t>0)}(n,a,l)}else 3===r&&function(e,r,t){let n=0,i=e.length,o=i/t;for(;i>r;){for(let t=r;t>0;--t)e[n+r]+=e[n],++n;i-=r}let l=e.slice();for(let r=0;r<o;++r)for(let n=0;n<t;++n)e[t*r+n]=l[(t-n-1)*o+r]}(n=new Uint8Array(e,o*a*t*l,a*t*l),a,l)}return e}(t,n,i,o,e.BitsPerSample,e.PlanarConfiguration)}return t}}},5522:function(e,r,t){t.r(r),t.d(r,{default:function(){return DeflateDecoder}});var n=t(7885),i=t(3704);let DeflateDecoder=class DeflateDecoder extends i.Z{decodeBlock(e){return(0,n.rr)(new Uint8Array(e)).buffer}}}}]);