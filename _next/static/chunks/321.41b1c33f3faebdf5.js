"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[321],{3704:function(e,t,r){r.d(t,{Z:function(){return BaseDecoder}});let BaseDecoder=class BaseDecoder{async decode(e,t){let r=await this.decodeBlock(t),n=e.Predictor||1;if(1!==n){let t=!e.StripOffsets,i=t?e.TileWidth:e.ImageWidth,o=t?e.TileLength:e.RowsPerStrip||e.ImageLength;return function(e,t,r,n,i,o){if(!t||1===t)return e;for(let e=0;e<i.length;++e){if(i[e]%8!=0)throw Error("When decoding with predictor, only multiple of 8 bits are supported.");if(i[e]!==i[0])throw Error("When decoding with predictor, all samples must have the same size.")}let l=i[0]/8,a=2===o?1:i.length;for(let o=0;o<n;++o){let n;if(o*a*r*l>=e.byteLength)break;if(2===t){switch(i[0]){case 8:n=new Uint8Array(e,o*a*r*l,a*r*l);break;case 16:n=new Uint16Array(e,o*a*r*l,a*r*l/2);break;case 32:n=new Uint32Array(e,o*a*r*l,a*r*l/4);break;default:throw Error(`Predictor 2 not allowed with ${i[0]} bits per sample.`)}!function(e,t){let r=e.length-t,n=0;do{for(let r=t;r>0;r--)e[n+t]+=e[n],n++;r-=t}while(r>0)}(n,a,l)}else 3===t&&function(e,t,r){let n=0,i=e.length,o=i/r;for(;i>t;){for(let r=t;r>0;--r)e[n+t]+=e[n],++n;i-=t}let l=e.slice();for(let t=0;t<o;++t)for(let n=0;n<r;++n)e[r*t+n]=l[(r-n-1)*o+t]}(n=new Uint8Array(e,o*a*r*l,a*r*l),a,l)}return e}(r,n,i,o,e.BitsPerSample,e.PlanarConfiguration)}return r}}},3321:function(e,t,r){r.r(t),r.d(t,{default:function(){return RawDecoder}});var n=r(3704);let RawDecoder=class RawDecoder extends n.Z{decodeBlock(e){return e}}}}]);